package ambit2.reactions.retrosynth;

import java.util.ArrayList;
import java.util.List;

import org.openscience.cdk.interfaces.IAtomContainer;

import ambit2.smarts.SmartsHelper;

public class ReactionSequenceLevel 
{
	public int levelIndex = 0;
	public ReactionSequenceLevel previousLevel = null;
	public ReactionSequenceLevel nextLevel = null;
	public List<ReactionSequenceStep> steps = new ArrayList<ReactionSequenceStep>(); 
	public List<IAtomContainer> molecules = new ArrayList<IAtomContainer>();
	
	
	public void addMolecule(IAtomContainer mol, ReactionSequenceStep step)
	{
		molecules.add(mol);
		steps.add(step);
		if (step != null)
		{	
			step.inputMolecule = mol;
			linkStepToNextLevel(step);
		}	
	}
	
	public void associateStep(int index, ReactionSequenceStep step)
	{
		steps.set(index, step);
		step.inputMolecule = molecules.get(index);
		linkStepToNextLevel(step);
	}
	
	public void linkStepToNextLevel(ReactionSequenceStep step)
	{
		if (nextLevel == null)
			getNextLevel();
		for (int i = 0; i<step.outputMolecules.size(); i++)
			nextLevel.addMolecule(step.outputMolecules.get(i), null);
	}
	
	public void removeMolecule(IAtomContainer mol, boolean updateUpperLevel)
	{
		//Removes the molecule, the associated step and 
		//corresponding reaction subsequence
		int index = molecules.indexOf(mol);
		molecules.remove(mol);
		removeStep(index);
		if (updateUpperLevel)
		{	
			//TODO update up levels indices due to molecule removal
		}	
	}
	
	public void removeStep(int index)
	{
		//Removes the step 
		//and recursively all reaction subsequences generated by the step
		ReactionSequenceStep step = steps.get(index);
		steps.remove(index);
		
		if (step == null)
			return; //no step is associated with the molecule
		
		//Remove subsequence generated by this step in down levels
		for (int i = 0; i < step.outputMolecules.size(); i++)
			nextLevel.removeMolecule(step.outputMolecules.get(i), false);
	}
	
	public void getNextLevel()
	{
		nextLevel = new ReactionSequenceLevel();
		nextLevel.levelIndex = this.levelIndex + 1;
		nextLevel.previousLevel = this;
	}
	
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		sb.append("Level " + levelIndex + "\n");
		for (int i = 0; i < molecules.size(); i++)
		{	
			String smi = null;
			try {
				smi = SmartsHelper.moleculeToSMILES(molecules.get(i),true);
			}
			catch (Exception x) {};
			sb.append("" + smi);
			ReactionSequenceStep step = steps.get(i);
			if (step != null)
			{
				//TODO
			}
			sb.append("\n");
		}
		return sb.toString();
	}
}
